// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// p_hscaled
Rcpp::NumericVector p_hscaled(const Rcpp::DataFrame& nodes, const Rcpp::DataFrame& sites, double bandwidth, bool edgeCorrection);
RcppExport SEXP _epiphy_p_hscaled(SEXP nodesSEXP, SEXP sitesSEXP, SEXP bandwidthSEXP, SEXP edgeCorrectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type sites(sitesSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< bool >::type edgeCorrection(edgeCorrectionSEXP);
    rcpp_result_gen = Rcpp::wrap(p_hscaled(nodes, sites, bandwidth, edgeCorrection));
    return rcpp_result_gen;
END_RCPP
}
// costTotiCPP
double costTotiCPP(long i1, const Rcpp::NumericMatrix& flow, const Rcpp::NumericMatrix& cost, bool averaged, bool absolute);
RcppExport SEXP _epiphy_costTotiCPP(SEXP i1SEXP, SEXP flowSEXP, SEXP costSEXP, SEXP averagedSEXP, SEXP absoluteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type i1(i1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type flow(flowSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type cost(costSEXP);
    Rcpp::traits::input_parameter< bool >::type averaged(averagedSEXP);
    Rcpp::traits::input_parameter< bool >::type absolute(absoluteSEXP);
    rcpp_result_gen = Rcpp::wrap(costTotiCPP(i1, flow, cost, averaged, absolute));
    return rcpp_result_gen;
END_RCPP
}
// costTotCPP
Rcpp::NumericVector costTotCPP(const Rcpp::NumericMatrix& flow, const Rcpp::NumericMatrix& cost);
RcppExport SEXP _epiphy_costTotCPP(SEXP flowSEXP, SEXP costSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type flow(flowSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type cost(costSEXP);
    rcpp_result_gen = Rcpp::wrap(costTotCPP(flow, cost));
    return rcpp_result_gen;
END_RCPP
}
// as_matrix_transport
Rcpp::NumericMatrix as_matrix_transport(Rcpp::List& x, double dim_mat);
RcppExport SEXP _epiphy_as_matrix_transport(SEXP xSEXP, SEXP dim_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type dim_mat(dim_matSEXP);
    rcpp_result_gen = Rcpp::wrap(as_matrix_transport(x, dim_mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epiphy_p_hscaled", (DL_FUNC) &_epiphy_p_hscaled, 4},
    {"_epiphy_costTotiCPP", (DL_FUNC) &_epiphy_costTotiCPP, 5},
    {"_epiphy_costTotCPP", (DL_FUNC) &_epiphy_costTotCPP, 2},
    {"_epiphy_as_matrix_transport", (DL_FUNC) &_epiphy_as_matrix_transport, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_epiphy(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
